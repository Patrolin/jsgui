function generateFontSizeCssVars(fontSizesStart = [13], sizes: string[] = SIZES) {
  const getSize = (fontSize: number) => Math.ceil(1.5 * fontSize);
  const fontSizes = fontSizesStart;
  for (let i = fontSizesStart.length; i < sizes.length; i++) {
    let desiredFontSize = Math.ceil(fontSizes[fontSizes.length - 1] * 1.25); // NOTE: derived from how monkeys count
    fontSizes[fontSizes.length - 1] = Math.floor(desiredFontSize / 1.25); // NOTE: move previous font size if rounding moved us a lot
    fontSizes.push(desiredFontSize);
  }
  let acc = "  /* generated by generateFontSizeCssVars */";
  for (let i = 0; i < sizes.length; i++) {
    const sizeName = sizes[i];
    const fontSize = fontSizes[i];
    const iconSize = 1.25*fontSize;
    const size = getSize(fontSize);
    acc += `\n  --fontSize-${sizeName}: ${fontSize}px;`;
    acc += `\n  --iconSize-${sizeName}: ${iconSize}px;`;
    acc += `\n  --size-${sizeName}: ${size}px;`;
  }
  return acc;
}
function generateColorCssVars(colors: StringMap<string> = BASE_COLORS, start = 0.874, step = 2, shades = COLOR_SHADES) {
  let acc = "  /* generated by generateColorCssVars */";
  for (let [colorName, color] of Object.entries(colors)) {
    for (let i = 0; i < shades.length; i++) {
      const shadeName = shades[i];
      const shadeSuffix = shadeName ? `-${shadeName}` : "";
      const shadeNumber = +`${(shadeName || "0")[0]}.${shadeName.slice(1)}`;
      const alpha = start / step ** shadeNumber;
      acc += `\n  --${colorName}${shadeSuffix}: rgba(${color}, ${alpha.toFixed(3)});`
    }
  }
  return acc;
}
setTimeout(() => {
  console.log(generateFontSizeCssVars());
  //console.log(generateColorCssVars());
})
