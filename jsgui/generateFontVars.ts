function generateFontSizeCssVars(names: string[] = SIZES) {
  type SizeDef = {
    fontSize: number;
    iconSize: number;
    size: number;
  };
  const getSizeDef = (i: number) => ({
    fontSize: 12 + i*4,
    iconSize: 14 + i*4,
    size: 16 + i*8,
  }) as SizeDef;
  let acc = "  /* generated by generateFontSizeCssVars */";
  for (let i = 0; i < names.length; i++) {
    const name = names[i];
    const {fontSize, iconSize, size} = getSizeDef(i);
    acc += `\n  --fontSize-${name}: ${fontSize}px;`;
    acc += `\n  --iconSize-${name}: ${iconSize}px;`;
    acc += `\n  --size-${name}: ${size}px;`;
  }
  return acc;
}
function generateColorCssVars(colors: StringMap<string> = BASE_COLORS, start = 0.874, step = 2, shades = COLOR_SHADES) {
  let acc = "  /* generated by generateColorCssVars */";
  for (let [colorName, color] of Object.entries(colors)) {
    for (let i = 0; i < shades.length; i++) {
      const shadeName = shades[i];
      const shadeSuffix = shadeName ? `-${shadeName}` : "";
      const shadeNumber = +`${(shadeName || "0")[0]}.${shadeName.slice(1)}`;
      const alpha = start / step ** shadeNumber;
      acc += `\n  --${colorName}${shadeSuffix}: rgba(${color}, ${alpha.toFixed(3)});`
    }
  }
  return acc;
}
setTimeout(() => {
  //console.log(generateFontSizeCssVars());
  console.log(generateColorCssVars());
})
