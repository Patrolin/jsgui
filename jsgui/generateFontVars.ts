function generateFontSizeCssVars(start = 12, names: string[] = ['small', 'normal', 'big', 'bigger'], maxOffset = 2) {
  const fontSizes = [start];
  for (let i = 1; i < names.length; i++) {
    let desiredFontSize = Math.ceil(fontSizes[fontSizes.length - 1] * 1.25); // NOTE: derived from how monkeys count
    while ((desiredFontSize % 2) !== 0) desiredFontSize++; // NOTE: prevent fractional pixels
    fontSizes.push(desiredFontSize);
  }
  let acc = "  /* generated by generateFontSizeCssVars */";
  for (let i = 0; i < names.length; i++) {
    const name = names[i];
    acc += `\n  --fontSize-${name}: ${fontSizes[i]}px;`;
    for (let offset = 1; offset <= maxOffset; offset++) {
      const j = Math.max(0, i - offset);
      acc += `\n  --fontSize-${name}-${offset}: var(--fontSize-${names[j]});`;
    }
    for (let offset = 1; offset <= maxOffset; offset++) {
      const j = Math.max(0, i - offset);
      const parentFontSize = fontSizes[i];
      const iconFontSize = fontSizes[j];
      const paddingLow = Math.floor((parentFontSize - iconFontSize) * 0.75);
      const paddingHigh = Math.round(1.5*(parentFontSize - iconFontSize) - paddingLow);
      const padding = (paddingLow === paddingHigh) ? `${paddingLow}px` : `${paddingLow}px ${paddingHigh}px ${paddingHigh}px ${paddingLow}px`;
      acc += `\n  --iconPadding-${name}-${offset}: ${padding};`;
    }
  }
  return acc;
}
function generateColorCssVars(start = 0.874, count = 4) {
  let acc = "  /* generated by generateColorCssVars */";
  for (let i = 0; i < count; i++) {
    const alpha = start * (0.5)**i;
    const name = (i > 0) ? `gray-${i}` : "gray";
    acc += `\n  --${name}: rgba(0, 0, 0, ${alpha.toFixed(3)});`
  }
  // TODO: blue/red
  return acc;
}
//console.log(generateFontSizeCssVars());
//console.log(generateColorCssVars())
