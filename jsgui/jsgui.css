/* v0.10-dev */
html, body {
  width: 100%;
  height: 100%;
}
body {
  margin: 0;
  font-family: var(--fontFamily-sans);
  font-size: var(--fontSize-x);
  background: rgb(255, 255, 255);
  color: var(--gray);
  --fontFamily-sans: "Roboto", "Helvetica", "Arial", sans-serif;
  --fontFamily-serif: Times, 'Times New Roman', serif;
  --fontFamily-button: ui-sans-serif, system-ui, var(--fontFamily-sans);
  /* generated by generateFontSizeCssVars() */
  --fontSize-small: 12px;
  --iconSize-small: 14px;
  --size-small: 16px;
  --fontSize-normal: 16px;
  --iconSize-normal: 18px;
  --size-normal: 24px;
  --fontSize-big: 20px;
  --iconSize-big: 22px;
  --size-big: 32px;
  --fontSize-bigger: 24px;
  --iconSize-bigger: 26px;
  --size-bigger: 40px;
  /* end generated */
  /* generated by generateColorCssVars */
  --gray: rgba(0, 0, 0, 0.874);
  --gray-033: rgba(0, 0, 0, 0.695);
  --gray-067: rgba(0, 0, 0, 0.549);
  --gray-1: rgba(0, 0, 0, 0.437);
  --gray-2: rgba(0, 0, 0, 0.218);
  --gray-250: rgba(0, 0, 0, 0.155);
  --gray-3: rgba(0, 0, 0, 0.109);
  --secondary: rgba(20, 80, 160, 0.874);
  --secondary-033: rgba(20, 80, 160, 0.695);
  --secondary-067: rgba(20, 80, 160, 0.549);
  --secondary-1: rgba(20, 80, 160, 0.437);
  --secondary-2: rgba(20, 80, 160, 0.218);
  --secondary-250: rgba(20, 80, 160, 0.155);
  --secondary-3: rgba(20, 80, 160, 0.109);
  --red: rgba(200, 50, 50, 0.874);
  --red-033: rgba(200, 50, 50, 0.695);
  --red-067: rgba(200, 50, 50, 0.549);
  --red-1: rgba(200, 50, 50, 0.437);
  --red-2: rgba(200, 50, 50, 0.218);
  --red-250: rgba(200, 50, 50, 0.155);
  --red-3: rgba(200, 50, 50, 0.109);
  /* end generated*/
  --timing-0d: cubic-bezier(.14, 0, .33, 1);
}
* {
  max-width: 100%; /* fix ellipsis */
  box-sizing: border-box;
  line-height: 1;
  transition: color 0.1s var(--timing-0d);
}
/* css utils */
[data-size="small"] {
  --fontSize-x: var(--fontSize-small);
  --iconSize-x: var(--iconSize-small);
  --size-x: var(--size-small);
}
body, [data-size="normal"] {
  --fontSize-x: var(--fontSize-normal);
  --iconSize-x: var(--iconSize-normal);
  --size-x: var(--size-normal);
}
[data-size="big"] {
  --fontSize-x: var(--fontSize-big);
  --iconSize-x: var(--iconSize-big);
  --size-x: var(--size-big);
}
[data-size="bigger"] {
  --fontSize-x: var(--fontSize-bigger);
  --iconSize-x: var(--iconSize-bigger);
  --size-x: var(--size-bigger);
}
.ellipsis {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}
[data-line-clamp] {
  overflow: hidden;
  display: -webkit-inline-box;
  -webkit-box-orient: vertical;
}
[data-line-clamp="1"] {
  line-clamp: 1;
  -webkit-line-clamp: 1;
}
[data-line-clamp="2"] {
  line-clamp: 2;
  -webkit-line-clamp: 2;
}
[data-line-clamp="3"] {
  line-clamp: 3;
  -webkit-line-clamp: 3;
}
@keyframes spin-animation {
  0% {
    transform: rotate(0deg);
  }
  100% {
    transform: rotate(360deg);
  }
}
/* basic components */
.divider[data-vertical="false"] {
  margin-inline: 8px;
  width: 100%;
  height: 1px;
  background: var(--gray-1);
}
.divider[data-vertical="true"] {
  margin-block: 8px;
  width: 1px;
  height: 100%;
  background: var(--gray-1);
}
span, a, button {
  display: inline-block; /* fix ellipsis */
  vertical-align: top; /* fix inline-block */
}
span, a, .coloredButton {
  font-size: var(--fontSize-x);
  line-height: var(--size-x);
}
a {
  color: var(--secondary);
}
a.icon {
  text-decoration: none;
  color: var(--secondary);
}
.selfLink {
  display: inline-flex;
  align-items: center;
}
.selfLink > .icon {
  visibility: hidden;
  color: var(--gray-2);
  text-decoration: none;
}
.selfLink:hover > .icon {
  visibility: visible;
}
.selfLink > .icon:hover {
  color: var(--secondary);
}
code {
  white-space: pre-wrap;
}
.icon {
  box-sizing: content-box;
  font-size: var(--iconSize-x);
  padding: calc(0.5*(var(--size-x) - var(--iconSize-x)));
  line-height: 1;
  width: 1em;
  height: 1em;
  color: var(--gray-1);
  user-select: none;
}
.icon[clickable="true"] {
  cursor: pointer;
}
.loadingSpinner {
  color: var(--secondary);
  animation: 2s linear 0s infinite normal none running spin-animation;
}
dialog {
  outline: none;
  border: none;
  border-radius: 8px;
  padding: 16px;
  border-bottom: 1px solid var(--gray-3);
  box-shadow: 0 1px 0 0 var(--gray-3);
}
dialog::backdrop {
  background: var(--gray-2);
}
.popup {
  inset: unset;
  max-width: unset;
  position: absolute;
  top: 0;
  left: 0;
  padding: 0;
  margin: 0;
  border: none;
  outline: none;
  box-shadow: none;
  background: transparent;
  /* NOTE: Scrolling inside .popup only scrolls the <html> tag, there is nothing we can do. */
}
.popupContentWrapper {
  max-width: calc(100vw - var(--scrollbarWidth));
  width: fit-content;
  border-radius: 8px;
  padding: 4px 8px;
  background: lightgray; /* TODO: background color */
}
.popup[data-interactable="false"] {
  pointer-events: none;
  user-select: none;
}
/* inputs */
/* TODO: use .jsguiButton instead */
.coloredButton {
  border: none;
  border-radius: 4px;
  padding: 0px 10px;
  height: calc(var(--size-x) + 2px);
  background: var(--buttonColor);
  transition: background-color 0.2s var(--timing-0d);
  border-bottom: 1px solid var(--gray-3);
  box-shadow: 0 1px 0 0 var(--gray-3);
  font-family: var(--fontFamily-button);
  color: var(--buttonFontColor);
  display: inline-flex;
  align-items: center;
  gap: 4px;
  --buttonColor: var(--gray-3);
  --buttonColorHover: var(--gray-250);
  --buttonColorActive: var(--gray-2);
  --buttonFontColor: var(--gray);
}
.coloredButton[data-color="secondary"] {
  --buttonColor: var(--secondary);
  --buttonColorHover: var(--secondary-067);
  --buttonColorActive: var(--secondary-1);
  --buttonFontColor: white;
}
.coloredButton:hover:not([disabled]) {
  background: var(--buttonColorHover);
  box-shadow: none;
}
.coloredButton:active:not([disabled]) {
  background: var(--buttonColorActive);
  margin-top: 1px;
  height: calc(var(--size-x) + 1px);
  border-bottom: none;
}
.coloredButton:not([disabled]) {
  cursor: pointer;
}
.coloredButton[disabled] {
  background-color: var(--gray-3);
  opacity: 0.5; /* TODO */
  --buttonFontColor: var(--gray);
}
.coloredButton > span:not(.icon) {
  align-self: flex-start;
}
.coloredButton .icon {
  color: var(--buttonFontColor); /* TODO: invert grays? */
}
.coloredButton > .icon {
  padding-inline: 0;
}
.labeledInput {
  margin: var(--fieldsetMargin);
  padding: 0;
  width: var(--fieldsetWidth);
  height: var(--fieldsetHeight);
  border: var(--fieldsetBorder);
  border-radius: 4px;
  cursor: text;
  display: flex;
  justify-content: space-between;
  --fieldsetWidth: 194px;
  --fieldsetHeight: calc(2*var(--size-small) + 0.5*var(--labelSize));
  --fieldsetMargin: 0 1px 6px 1px;
  --fieldsetMarginFocus: 0 0 6px 0;
  --fieldsetBorder: 1px solid var(--gray-2);
  --fieldsetBorderHover: 1px solid var(--gray-1);
  --fieldsetBorderFocus: 2px solid var(--secondary);
  --fieldsetBorderError: 1px solid var(--red);
  --fieldsetBorderErrorFocus: 2px solid var(--red);
  --labelSize: var(--fontSize-small);
  --labelColor: var(--gray-1);
  --labelColorFocus: var(--secondary);
  --labelColorError: var(--red);
  --labelColor-x: var(--labelColor);
  --labelMarginLeft: 8px;
}
.labeledInput:hover {
  border: var(--fieldsetBorderHover);
}
.labeledInput:focus-within {
  margin: var(--fieldsetMarginFocus);
  width: calc(var(--fieldsetWidth) + 2px);
  border: var(--fieldsetBorderFocus);
  --labelColor-x: var(--labelColorFocus);
}
.labeledInput[fieldset-error="true"] {
  border: var(--fieldsetBorderError);
  --labelColor-x: var(--labelColorError);
}
.labeledInput[fieldset-error="true"]:focus-within {
  border: var(--fieldsetBorderErrorFocus);
}
.labeledInput legend {
  white-space: pre;
  color: var(--labelColor-x);
  user-select: none;
  font-size: var(--labelSize);
  line-height: 1;
  margin-left: var(--labelMarginLeft);
  padding-inline: 4px;
  max-width: calc(var(--fieldsetWidth) - 33px);
}
.labeledInput > :not(legend) {
  position: relative;
  background: none;
  top: -3px;
  height: calc(var(--fieldsetHeight) - 6px);
}
.numberArrows {
  top: -6px !important;
  display: flex;
  flex-direction: column;
  color: var(--gray-1);
  --numberArrowPadding: calc(var(--size-x) - var(--iconSize-x));
}
.numberArrows .icon {
  padding-left: calc(0.5*(var(--size-x) - var(--iconSize-x)) - 1px);
  border-left: 1px solid var(--gray-3);
}
.numberArrows .icon[data-icon="arrow_drop_up"] {
  padding-bottom: calc(0.5*(var(--size-x) - var(--iconSize-x)) - 1px);
  border-bottom: 1px solid var(--gray-3);
}
.numberArrows .icon:hover {
  color: var(--gray);
  background: var(--gray-3);
}
.labeledInput input {
  width: 100%;
  height: calc(var(--fieldsetHeight) - 9px);
  outline: none;
  border: none;
  flex: 1;
  padding-inline: calc(4px + var(--labelMarginLeft)) 9px;
  font-family: var(--fontFamily-sans);
  font-size: var(--fontSize-normal);
}
.table {
  width: 100%;
  display: flex;
  flex-direction: column;
  justify-content: flex-start;
  align-items: flex-start;
  border: var(--tableBorder);
  border-radius: 4px;
  color: var(--lightGray);
  --tableBorder: 1px solid var(--gray-2);
  --labelColor: var(--lightGray);
  --labelPadding: 8px 0 2px 16px;
  --rowPadding: 2px 0 2px 18px;
  --cellPadding: 0 14px 0 0;
}
.table[use-max-height="true"] {
  height: 100%;
}
.table[is-loading="true"] {
  justify-content: center;
  align-items: center;
}
.tableLabel {
  padding: var(--labelPadding);
  font-size: var(--fontSize-bigger);
  color: var(--labelColor);
}
.tableRow {
  width: 100%;
  display: flex;
  flex-direction: row;
  justify-content: flex-start;
  align-items: stretch;
  border-bottom: var(--tableBorder);
  padding: var(--rowPadding);
}
.tableRow.tableBody {
  font-family: var(--fontFamily-serif);
  font-size: var(--fontSize-big);
}
.tableCell {
  flex: 1;
  padding: var(--cellPadding);
  color: var(--cellColor);
}
.pageContent {
  padding: 8px 16px;
  flex: 1;
  overflow: auto;
}
